import { test } from '@japa/runner'
import { makeAceApp, TEST_DIRECTORY } from './utils.js'
import Codegen from '../commands/codegen.js'
import nodeFs from 'node:fs/promises'
import path from 'node:path'

test.group('Example', () => {
  test('add two numbers', async ({ assert, fs }) => {
    const petstoreSpecs = await nodeFs.readFile(
      path.join(TEST_DIRECTORY, 'fixtures', 'petstore.yaml'),
      'utf-8'
    )
    fs.create('resources/openapi/specs.yaml', petstoreSpecs)
    // sinon.stub(Codegen.prototype, 'getSpecsContent').resolves(petstoreSpecs)
    const ace = await makeAceApp(fs)
    const command = await ace.create(Codegen, [])
    await command.exec()
    command.assertSucceeded()
    // We are not testing the actual types generated by openapi-typescript
    // Instead we just test that the file was created with some relevant types
    await assert.fileContains('generated/openapi-server/types.d.ts', 'export interface paths')
    console.log(await fs.contents('generated/openapi-server/operations.ts'))
  })
})
